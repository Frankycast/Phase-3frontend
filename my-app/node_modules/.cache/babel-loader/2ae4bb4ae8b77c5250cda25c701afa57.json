{"ast":null,"code":"var _jsxFileName = \"/Users/fc21/Development/code/ph3/Phase-3frontend/my-app/src/MemoryApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport uniqueCardsArray from \"./data.js\"; // import \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Header from \"./Header\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Card from \"./MemoryCards\";\nimport Finish from \"./finnish\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction swap(array, i, j) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n\nfunction shuffleCards(array) {\n  const length = array.length;\n\n  for (let i = length; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const currentIndex = i - 1;\n    swap(array, currentIndex, randomIndex);\n  }\n\n  return array;\n}\n\nconst App = () => {\n  _s();\n\n  const [cards, setCards] = useState(() => shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  const [openCards, setOpencards] = useState([]);\n  const [matchedCards, setMatchedcards] = useState({});\n  const [moves, setMoves] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [bestScore, setBestScore] = useState(JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY);\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(matchedCards).length === uniqueCardsArray.length) {\n      setShowModal(true);\n      const highScore = Math.min(moves, bestScore);\n      setBestScore(highScore);\n      localStorage.setItem(\"bestScore\", highScore);\n    }\n  };\n\n  const evaluate = () => {\n    const [first, second] = openCards;\n    enable();\n\n    if (cards[first].type === cards[second].type) {\n      setMatchedcards(prev => ({ ...prev,\n        [cards[first].type]: true\n      }));\n      setOpencards([]); // alert(\"you have found a match\");\n\n      return;\n    }\n\n    timeout.current = setTimeout(() => {\n      setOpencards([]);\n    }, 500);\n  };\n\n  const handleCardClick = index => {\n    if (openCards.length === 1) {\n      setOpencards(prev => [...prev, index]);\n      setMoves(moves => moves + 1);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpencards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    }; // eslint-disable-next-line\n  }, [openCards]);\n  useEffect(() => {\n    // eslint-disable-next-line\n    checkCompletion(); // eslint-disable-next-line\n  }, [matchedCards]);\n\n  const checkIsFlipped = index => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = card => {\n    return Boolean(matchedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    setMatchedcards({});\n    setOpencards([]);\n    setShowModal(false);\n    setMoves(0);\n    setShouldDisableAllCards(false);\n    setCards(shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      moves: moves,\n      bestScore: bestScore,\n      handleRestart: handleRestart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: cards.map((card, index) => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            xs: 6,\n            md: 3,\n            lg: 2,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              card: card,\n              index: index,\n              isDisabled: shouldDisableAllCards,\n              isInactive: checkIsInactive(card),\n              isFlipped: checkIsFlipped(index),\n              onClick: handleCardClick\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Finish, {\n      showModal: showModal,\n      moves: moves,\n      bestScore: bestScore,\n      handleRestart: handleRestart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"cqfgKhhgRy1ZJkTfSsapt1iQ5Ds=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/fc21/Development/code/ph3/Phase-3frontend/my-app/src/MemoryApp.js"],"names":["React","useEffect","useRef","useState","uniqueCardsArray","Header","Col","Container","Row","Card","Finish","swap","array","i","j","temp","shuffleCards","length","randomIndex","Math","floor","random","currentIndex","App","cards","setCards","concat","openCards","setOpencards","matchedCards","setMatchedcards","moves","setMoves","showModal","setShowModal","shouldDisableAllCards","setShouldDisableAllCards","bestScore","setBestScore","JSON","parse","localStorage","getItem","Number","POSITIVE_INFINITY","timeout","disable","enable","checkCompletion","Object","keys","highScore","min","setItem","evaluate","first","second","type","prev","current","setTimeout","handleCardClick","index","clearTimeout","checkIsFlipped","includes","checkIsInactive","card","Boolean","handleRestart","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport uniqueCardsArray from \"./data.js\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./Header\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport Card from \"./MemoryCards\";\nimport Finish from \"./finnish\";\n\nfunction swap(array, i, j) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\nfunction shuffleCards(array) {\n  const length = array.length;\n  for (let i = length; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const currentIndex = i - 1;\n    swap(array, currentIndex, randomIndex);\n  }\n  return array;\n}\n\nconst App = () => {\n  const [cards, setCards] = useState(() =>\n    shuffleCards(uniqueCardsArray.concat(uniqueCardsArray))\n  );\n  const [openCards, setOpencards] = useState([]);\n  const [matchedCards, setMatchedcards] = useState({});\n  const [moves, setMoves] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [bestScore, setBestScore] = useState(\n    JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY\n  );\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(matchedCards).length === uniqueCardsArray.length) {\n      setShowModal(true);\n      const highScore = Math.min(moves, bestScore);\n      setBestScore(highScore);\n      localStorage.setItem(\"bestScore\", highScore);\n    }\n  };\n\n  const evaluate = () => {\n    const [first, second] = openCards;\n    enable();\n    if (cards[first].type === cards[second].type) {\n      setMatchedcards((prev) => ({ ...prev, [cards[first].type]: true }));\n      setOpencards([]);\n      // alert(\"you have found a match\");\n      return;\n    }\n    timeout.current = setTimeout(() => {\n      setOpencards([]);\n    }, 500);\n  };\n\n  const handleCardClick = (index) => {\n    if (openCards.length === 1) {\n      setOpencards((prev) => [...prev, index]);\n      setMoves((moves) => moves + 1);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpencards([index]);\n    }\n  };\n  useEffect(() => {\n    let timeout = null;\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 300);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n    // eslint-disable-next-line\n  }, [openCards]);\n\n  useEffect(() => {\n    // eslint-disable-next-line\n    checkCompletion();\n    // eslint-disable-next-line\n  }, [matchedCards]);\n\n  const checkIsFlipped = (index) => {\n    return openCards.includes(index);\n  };\n  const checkIsInactive = (card) => {\n    return Boolean(matchedCards[card.type]);\n  };\n  const handleRestart = () => {\n    setMatchedcards({});\n    setOpencards([]);\n    setShowModal(false);\n    setMoves(0);\n    setShouldDisableAllCards(false);\n    setCards(shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  };\n\n  return (\n    <div>\n      <Header\n        moves={moves}\n        bestScore={bestScore}\n        handleRestart={handleRestart}\n      />\n      <Container>\n        <Row>\n          {cards.map((card, index) => {\n            return (\n              <Col xs={6} md={3} lg={2}>\n                <Card\n                  key={index}\n                  card={card}\n                  index={index}\n                  isDisabled={shouldDisableAllCards}\n                  isInactive={checkIsInactive(card)}\n                  isFlipped={checkIsFlipped(index)}\n                  onClick={handleCardClick}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n      <Finish\n        showModal={showModal}\n        moves={moves}\n        bestScore={bestScore}\n        handleRestart={handleRestart}\n      />\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}